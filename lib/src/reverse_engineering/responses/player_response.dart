import 'dart:convert';

import 'package:http_parser/http_parser.dart';

import '../../extensions/helpers_extension.dart';
import 'stream_info_provider.dart';

class PlayerResponse {
  // Json parsed map
  final Map<String, dynamic> _root;

  PlayerResponse(this._root);

  String get playabilityStatus => _root['playabilityStatus']['status'];

  bool get isVideoAvailable => playabilityStatus.toLowerCase() != 'error';

  bool get isVideoPlayable => playabilityStatus.toLowerCase() == 'ok';

  String get videoTitle => _root['videoDetails']['title'];

  String get videoAuthor => _root['videoDetails']['author'];

  DateTime get videoUploadDate => DateTime.parse(
      _root['microformat']['playerMicroformatRenderer']['uploadDate']);

  String get videoChannelId => _root['videoDetails']['channelId'];

  Duration get videoDuration =>
      Duration(seconds: int.parse(_root['videoDetails']['lengthSeconds']));

  Iterable<String> get videoKeywords =>
      _root['videoDetails']['keywords']?.cast<String>() ?? const [];

  String get videoDescription => _root['videoDetails']['shortDescription'];

  int get videoViewCount => int.parse(_root['videoDetails']['viewCount']);

  // Can be null
  String get previewVideoId =>
      _root
          .get('playabilityStatus')
          ?.get('errorScreen')
          ?.get('playerLegacyDesktopYpcTrailerRenderer')
          ?.getValue('trailerVideoId') ??
      Uri.splitQueryString(_root
              .get('playabilityStatus')
              ?.get('errorScreen')
              ?.get('')
              ?.get('ypcTrailerRenderer')
              ?.getValue('playerVars') ??
          '')['video_id'];

  bool get isLive => _root.get('videoDetails')?.getValue('isLive') ?? false;

  // Can be null
  String get hlsManifestUrl =>
      _root.get('streamingData')?.getValue('hlsManifestUrl');

  // Can be null
  String get dashManifestUrl =>
      _root.get('streamingData')?.getValue('dashManifestUrl');

  Iterable<StreamInfoProvider> get muxedStreams =>
      _root
          ?.get('streamingData')
          ?.getValue('formats')
          ?.map((e) => _StreamInfo(e))
          ?.cast<StreamInfoProvider>() ??
      const <StreamInfoProvider>[];

  Iterable<StreamInfoProvider> get adaptiveStreams =>
      _root
          ?.get('streamingData')
          ?.getValue('adaptiveFormats')
          ?.map((e) => _StreamInfo(e))
          ?.cast<StreamInfoProvider>() ??
      const <StreamInfoProvider>[];

  Iterable<StreamInfoProvider> get streams =>
      [...muxedStreams, ...adaptiveStreams];

  Iterable<ClosedCaptionTrack> get closedCaptionTrack =>
      _root
          .get('captions')
          ?.get('playerCaptionsTracklistRenderer')
          ?.getValue('captionTracks')
          ?.map((e) => ClosedCaptionTrack(e))
          ?.cast<ClosedCaptionTrack>() ??
      const [];

  String getVideoPlayabilityError() =>
      _root.get('playabilityStatus')?.getValue('reason');

  PlayerResponse.parse(String raw) : _root = json.decode(raw);
}

class ClosedCaptionTrack {
  // Json parsed map
  final Map<String, dynamic> _root;

  ClosedCaptionTrack(this._root);

  String get url => _root['baseUrl'];

  String get languageCode => _root['languageCode'];

  String get languageName => _root['name']['simpleText'];

  bool get autoGenerated => _root['vssId'].toLowerCase().startsWith("a.");
}

class _StreamInfo extends StreamInfoProvider {
  // Json parsed map
  final Map<String, dynamic> _root;

  _StreamInfo(this._root);

  @override
  int get bitrate => _root['bitrate'];

  @override
  String get container => mimeType.subtype;

  static final _contentLenExp = RegExp(r'[\?&]clen=(\d+)');

  @override
  int get contentLength =>
      int.tryParse(_root['contentLength'] ?? '') ??
      _contentLenExp.firstMatch(url)?.group(1);

  @override
  int get framerate => _root['fps'];

  @override
  String get signature =>
      Uri.splitQueryString(_root['signatureCipher'] ?? '')['s'];

  @override
  String get signatureParameter =>
      Uri.splitQueryString(_root['cipher'] ?? '')['sp'] ??
      Uri.splitQueryString(_root['signatureCipher'] ?? '')['sp'];

  @override
  int get tag => _root['itag'];

  @override
  String get url => _getUrl();

  String _getUrl() {
    var url = _root['url'];
    url ??= Uri.splitQueryString(_root['cipher'] ?? '')['url'];
    url ??= Uri.splitQueryString(_root['signatureCipher'] ?? '')['url'];
    return url;
  }

  @override
  String get videoCodec =>
      isAudioOnly ? null : codecs.split(',').first.trim().nullIfWhitespace;

  @override
  int get videoHeight => _root['height'];

  @override
  String get videoQualityLabel => _root['qualityLabel'];

  @override
  int get videoWidth => _root['width'];

  bool get isAudioOnly => mimeType.type == 'audio';

  MediaType get mimeType => MediaType.parse(_root['mimeType']);

  String get codecs => mimeType?.parameters['codecs']?.toLowerCase();

  @override
  String get audioCodec =>
      isAudioOnly ? codecs : _getAudioCodec(codecs.split(','))?.trim();

  String _getAudioCodec(List<String> codecs) {
    if (codecs.length == 1) {
      return null;
    }
    return codecs.last;
  }
}
